/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object MarketState extends ThriftStructCodec3[MarketState] {
  val Struct = new TStruct("MarketState")
  val BetDelayField = new TField("betDelay", TType.I16, 1)
  val BspReconciledField = new TField("bspReconciled", TType.BOOL, 2)
  val CompleteField = new TField("complete", TType.BOOL, 3)
  val CrossMatchingField = new TField("crossMatching", TType.BOOL, 4)
  val InplayField = new TField("inplay", TType.BOOL, 5)
  val NumberOfActiveRunnersField = new TField("numberOfActiveRunners", TType.I16, 6)
  val NumberOfRunnersField = new TField("numberOfRunners", TType.I16, 7)
  val NumberOfWinnersField = new TField("numberOfWinners", TType.I16, 8)
  val RunnersVoidableField = new TField("runnersVoidable", TType.BOOL, 9)
  val StatusField = new TField("status", TType.I32, 10)
  val TotalAvailableField = new TField("totalAvailable", TType.DOUBLE, 11)
  val TotalMatchedField = new TField("totalMatched", TType.DOUBLE, 12)
  val VersionField = new TField("version", TType.I32, 13)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: MarketState) {
  }

  override def encode(_item: MarketState, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): MarketState = decode(_iprot)

  def apply(
    betDelay: Short,
    bspReconciled: Boolean,
    complete: Boolean,
    crossMatching: Boolean,
    inplay: Boolean,
    numberOfActiveRunners: Short,
    numberOfRunners: Short,
    numberOfWinners: Short,
    runnersVoidable: Boolean,
    status: MarketStatus,
    totalAvailable: Double,
    totalMatched: Double,
    version: Int
  ): MarketState = new Immutable(
    betDelay,
    bspReconciled,
    complete,
    crossMatching,
    inplay,
    numberOfActiveRunners,
    numberOfRunners,
    numberOfWinners,
    runnersVoidable,
    status,
    totalAvailable,
    totalMatched,
    version
  )

  def unapply(_item: MarketState): Option[Product13[Short, Boolean, Boolean, Boolean, Boolean, Short, Short, Short, Boolean, MarketStatus, Double, Double, Int]] = Some(_item)

  object Immutable extends ThriftStructCodec3[MarketState] {
    override def encode(_item: MarketState, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var betDelay: Short = 0
      var _got_betDelay = false
      var bspReconciled: Boolean = false
      var _got_bspReconciled = false
      var complete: Boolean = false
      var _got_complete = false
      var crossMatching: Boolean = false
      var _got_crossMatching = false
      var inplay: Boolean = false
      var _got_inplay = false
      var numberOfActiveRunners: Short = 0
      var _got_numberOfActiveRunners = false
      var numberOfRunners: Short = 0
      var _got_numberOfRunners = false
      var numberOfWinners: Short = 0
      var _got_numberOfWinners = false
      var runnersVoidable: Boolean = false
      var _got_runnersVoidable = false
      var status: MarketStatus = null
      var _got_status = false
      var totalAvailable: Double = 0.0
      var _got_totalAvailable = false
      var totalMatched: Double = 0.0
      var _got_totalMatched = false
      var version: Int = 0
      var _got_version = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* betDelay */
              _field.`type` match {
                case TType.I16 => {
                  betDelay = {
                    _iprot.readI16()
                  }
                  _got_betDelay = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* bspReconciled */
              _field.`type` match {
                case TType.BOOL => {
                  bspReconciled = {
                    _iprot.readBool()
                  }
                  _got_bspReconciled = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* complete */
              _field.`type` match {
                case TType.BOOL => {
                  complete = {
                    _iprot.readBool()
                  }
                  _got_complete = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* crossMatching */
              _field.`type` match {
                case TType.BOOL => {
                  crossMatching = {
                    _iprot.readBool()
                  }
                  _got_crossMatching = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 5 => { /* inplay */
              _field.`type` match {
                case TType.BOOL => {
                  inplay = {
                    _iprot.readBool()
                  }
                  _got_inplay = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 6 => { /* numberOfActiveRunners */
              _field.`type` match {
                case TType.I16 => {
                  numberOfActiveRunners = {
                    _iprot.readI16()
                  }
                  _got_numberOfActiveRunners = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 7 => { /* numberOfRunners */
              _field.`type` match {
                case TType.I16 => {
                  numberOfRunners = {
                    _iprot.readI16()
                  }
                  _got_numberOfRunners = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 8 => { /* numberOfWinners */
              _field.`type` match {
                case TType.I16 => {
                  numberOfWinners = {
                    _iprot.readI16()
                  }
                  _got_numberOfWinners = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 9 => { /* runnersVoidable */
              _field.`type` match {
                case TType.BOOL => {
                  runnersVoidable = {
                    _iprot.readBool()
                  }
                  _got_runnersVoidable = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 10 => { /* status */
              _field.`type` match {
                case TType.I32 => {
                  status = {
                    com.twitter.mydemo.renamed.MarketStatus(_iprot.readI32())
                  }
                  _got_status = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 11 => { /* totalAvailable */
              _field.`type` match {
                case TType.DOUBLE => {
                  totalAvailable = {
                    _iprot.readDouble()
                  }
                  _got_totalAvailable = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 12 => { /* totalMatched */
              _field.`type` match {
                case TType.DOUBLE => {
                  totalMatched = {
                    _iprot.readDouble()
                  }
                  _got_totalMatched = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 13 => { /* version */
              _field.`type` match {
                case TType.I32 => {
                  version = {
                    _iprot.readI32()
                  }
                  _got_version = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        betDelay,
        bspReconciled,
        complete,
        crossMatching,
        inplay,
        numberOfActiveRunners,
        numberOfRunners,
        numberOfWinners,
        runnersVoidable,
        status,
        totalAvailable,
        totalMatched,
        version
      )
    }
  }

  /**
   * The default read-only implementation of MarketState.  You typically should not need to
   * directly reference this class; instead, use the MarketState.apply method to construct
   * new instances.
   */
  class Immutable(
    val betDelay: Short,
    val bspReconciled: Boolean,
    val complete: Boolean,
    val crossMatching: Boolean,
    val inplay: Boolean,
    val numberOfActiveRunners: Short,
    val numberOfRunners: Short,
    val numberOfWinners: Short,
    val runnersVoidable: Boolean,
    val status: MarketStatus,
    val totalAvailable: Double,
    val totalMatched: Double,
    val version: Int
  ) extends MarketState

  /**
   * This Proxy trait allows you to extend the MarketState trait with additional state or
   * behavior and implement the read-only methods from MarketState using an underlying
   * instance.
   */
  trait Proxy extends MarketState {
    protected def _underlying_MarketState: MarketState
    def betDelay: Short = _underlying_MarketState.betDelay
    def bspReconciled: Boolean = _underlying_MarketState.bspReconciled
    def complete: Boolean = _underlying_MarketState.complete
    def crossMatching: Boolean = _underlying_MarketState.crossMatching
    def inplay: Boolean = _underlying_MarketState.inplay
    def numberOfActiveRunners: Short = _underlying_MarketState.numberOfActiveRunners
    def numberOfRunners: Short = _underlying_MarketState.numberOfRunners
    def numberOfWinners: Short = _underlying_MarketState.numberOfWinners
    def runnersVoidable: Boolean = _underlying_MarketState.runnersVoidable
    def status: MarketStatus = _underlying_MarketState.status
    def totalAvailable: Double = _underlying_MarketState.totalAvailable
    def totalMatched: Double = _underlying_MarketState.totalMatched
    def version: Int = _underlying_MarketState.version
  }
}

trait MarketState extends ThriftStruct
  with Product13[Short, Boolean, Boolean, Boolean, Boolean, Short, Short, Short, Boolean, MarketStatus, Double, Double, Int]
  with java.io.Serializable
{
  import MarketState._

  def betDelay: Short
  def bspReconciled: Boolean
  def complete: Boolean
  def crossMatching: Boolean
  def inplay: Boolean
  def numberOfActiveRunners: Short
  def numberOfRunners: Short
  def numberOfWinners: Short
  def runnersVoidable: Boolean
  def status: MarketStatus
  def totalAvailable: Double
  def totalMatched: Double
  def version: Int

  def _1 = betDelay
  def _2 = bspReconciled
  def _3 = complete
  def _4 = crossMatching
  def _5 = inplay
  def _6 = numberOfActiveRunners
  def _7 = numberOfRunners
  def _8 = numberOfWinners
  def _9 = runnersVoidable
  def _10 = status
  def _11 = totalAvailable
  def _12 = totalMatched
  def _13 = version

  override def write(_oprot: TProtocol) {
    MarketState.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val betDelay_item = betDelay
      _oprot.writeFieldBegin(BetDelayField)
      _oprot.writeI16(betDelay_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val bspReconciled_item = bspReconciled
      _oprot.writeFieldBegin(BspReconciledField)
      _oprot.writeBool(bspReconciled_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val complete_item = complete
      _oprot.writeFieldBegin(CompleteField)
      _oprot.writeBool(complete_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val crossMatching_item = crossMatching
      _oprot.writeFieldBegin(CrossMatchingField)
      _oprot.writeBool(crossMatching_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val inplay_item = inplay
      _oprot.writeFieldBegin(InplayField)
      _oprot.writeBool(inplay_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val numberOfActiveRunners_item = numberOfActiveRunners
      _oprot.writeFieldBegin(NumberOfActiveRunnersField)
      _oprot.writeI16(numberOfActiveRunners_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val numberOfRunners_item = numberOfRunners
      _oprot.writeFieldBegin(NumberOfRunnersField)
      _oprot.writeI16(numberOfRunners_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val numberOfWinners_item = numberOfWinners
      _oprot.writeFieldBegin(NumberOfWinnersField)
      _oprot.writeI16(numberOfWinners_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val runnersVoidable_item = runnersVoidable
      _oprot.writeFieldBegin(RunnersVoidableField)
      _oprot.writeBool(runnersVoidable_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val status_item = status
      _oprot.writeFieldBegin(StatusField)
      _oprot.writeI32(status_item.value)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val totalAvailable_item = totalAvailable
      _oprot.writeFieldBegin(TotalAvailableField)
      _oprot.writeDouble(totalAvailable_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val totalMatched_item = totalMatched
      _oprot.writeFieldBegin(TotalMatchedField)
      _oprot.writeDouble(totalMatched_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val version_item = version
      _oprot.writeFieldBegin(VersionField)
      _oprot.writeI32(version_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    betDelay: Short = this.betDelay, 
    bspReconciled: Boolean = this.bspReconciled, 
    complete: Boolean = this.complete, 
    crossMatching: Boolean = this.crossMatching, 
    inplay: Boolean = this.inplay, 
    numberOfActiveRunners: Short = this.numberOfActiveRunners, 
    numberOfRunners: Short = this.numberOfRunners, 
    numberOfWinners: Short = this.numberOfWinners, 
    runnersVoidable: Boolean = this.runnersVoidable, 
    status: MarketStatus = this.status, 
    totalAvailable: Double = this.totalAvailable, 
    totalMatched: Double = this.totalMatched, 
    version: Int = this.version
  ): MarketState = new Immutable(
    betDelay, 
    bspReconciled, 
    complete, 
    crossMatching, 
    inplay, 
    numberOfActiveRunners, 
    numberOfRunners, 
    numberOfWinners, 
    runnersVoidable, 
    status, 
    totalAvailable, 
    totalMatched, 
    version
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[MarketState]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 13

  override def productElement(n: Int): Any = n match {
    case 0 => betDelay
    case 1 => bspReconciled
    case 2 => complete
    case 3 => crossMatching
    case 4 => inplay
    case 5 => numberOfActiveRunners
    case 6 => numberOfRunners
    case 7 => numberOfWinners
    case 8 => runnersVoidable
    case 9 => status
    case 10 => totalAvailable
    case 11 => totalMatched
    case 12 => version
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "MarketState"
}