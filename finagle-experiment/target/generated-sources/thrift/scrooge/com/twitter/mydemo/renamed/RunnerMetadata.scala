/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object RunnerMetadata extends ThriftStructCodec3[RunnerMetadata] {
  val Struct = new TStruct("RunnerMetadata")
  val RunnerIdField = new TField("runnerId", TType.STRING, 1)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: RunnerMetadata) {
  }

  override def encode(_item: RunnerMetadata, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): RunnerMetadata = decode(_iprot)

  def apply(
    runnerId: String
  ): RunnerMetadata = new Immutable(
    runnerId
  )

  def unapply(_item: RunnerMetadata): Option[String] = Some(_item.runnerId)

  object Immutable extends ThriftStructCodec3[RunnerMetadata] {
    override def encode(_item: RunnerMetadata, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var runnerId: String = null
      var _got_runnerId = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* runnerId */
              _field.`type` match {
                case TType.STRING => {
                  runnerId = {
                    _iprot.readString()
                  }
                  _got_runnerId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        runnerId
      )
    }
  }

  /**
   * The default read-only implementation of RunnerMetadata.  You typically should not need to
   * directly reference this class; instead, use the RunnerMetadata.apply method to construct
   * new instances.
   */
  class Immutable(
    val runnerId: String
  ) extends RunnerMetadata

  /**
   * This Proxy trait allows you to extend the RunnerMetadata trait with additional state or
   * behavior and implement the read-only methods from RunnerMetadata using an underlying
   * instance.
   */
  trait Proxy extends RunnerMetadata {
    protected def _underlying_RunnerMetadata: RunnerMetadata
    def runnerId: String = _underlying_RunnerMetadata.runnerId
  }
}

trait RunnerMetadata extends ThriftStruct
  with Product1[String]
  with java.io.Serializable
{
  import RunnerMetadata._

  def runnerId: String

  def _1 = runnerId

  override def write(_oprot: TProtocol) {
    RunnerMetadata.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val runnerId_item = runnerId
      _oprot.writeFieldBegin(RunnerIdField)
      _oprot.writeString(runnerId_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    runnerId: String = this.runnerId
  ): RunnerMetadata = new Immutable(
    runnerId
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[RunnerMetadata]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => runnerId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "RunnerMetadata"
}