/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Runner extends ThriftStructCodec3[Runner] {
  val Struct = new TStruct("Runner")
  val DecriptionField = new TField("decription", TType.STRUCT, 1)
  val ExchangeField = new TField("exchange", TType.STRUCT, 2)
  val HandicapField = new TField("handicap", TType.I16, 3)
  val SelectionIdField = new TField("selectionId", TType.I16, 4)
  val StateField = new TField("state", TType.STRUCT, 5)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Runner) {
  }

  override def encode(_item: Runner, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Runner = decode(_iprot)

  def apply(
    decription: RunnerDescriptor,
    exchange: Exchange,
    handicap: Short,
    selectionId: Short,
    state: RunnerState
  ): Runner = new Immutable(
    decription,
    exchange,
    handicap,
    selectionId,
    state
  )

  def unapply(_item: Runner): Option[Product5[RunnerDescriptor, Exchange, Short, Short, RunnerState]] = Some(_item)

  object Immutable extends ThriftStructCodec3[Runner] {
    override def encode(_item: Runner, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var decription: RunnerDescriptor = null
      var _got_decription = false
      var exchange: Exchange = null
      var _got_exchange = false
      var handicap: Short = 0
      var _got_handicap = false
      var selectionId: Short = 0
      var _got_selectionId = false
      var state: RunnerState = null
      var _got_state = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* decription */
              _field.`type` match {
                case TType.STRUCT => {
                  decription = {
                    com.twitter.mydemo.renamed.RunnerDescriptor.decode(_iprot)
                  }
                  _got_decription = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* exchange */
              _field.`type` match {
                case TType.STRUCT => {
                  exchange = {
                    com.twitter.mydemo.renamed.Exchange.decode(_iprot)
                  }
                  _got_exchange = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* handicap */
              _field.`type` match {
                case TType.I16 => {
                  handicap = {
                    _iprot.readI16()
                  }
                  _got_handicap = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* selectionId */
              _field.`type` match {
                case TType.I16 => {
                  selectionId = {
                    _iprot.readI16()
                  }
                  _got_selectionId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 5 => { /* state */
              _field.`type` match {
                case TType.STRUCT => {
                  state = {
                    com.twitter.mydemo.renamed.RunnerState.decode(_iprot)
                  }
                  _got_state = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        decription,
        exchange,
        handicap,
        selectionId,
        state
      )
    }
  }

  /**
   * The default read-only implementation of Runner.  You typically should not need to
   * directly reference this class; instead, use the Runner.apply method to construct
   * new instances.
   */
  class Immutable(
    val decription: RunnerDescriptor,
    val exchange: Exchange,
    val handicap: Short,
    val selectionId: Short,
    val state: RunnerState
  ) extends Runner

  /**
   * This Proxy trait allows you to extend the Runner trait with additional state or
   * behavior and implement the read-only methods from Runner using an underlying
   * instance.
   */
  trait Proxy extends Runner {
    protected def _underlying_Runner: Runner
    def decription: RunnerDescriptor = _underlying_Runner.decription
    def exchange: Exchange = _underlying_Runner.exchange
    def handicap: Short = _underlying_Runner.handicap
    def selectionId: Short = _underlying_Runner.selectionId
    def state: RunnerState = _underlying_Runner.state
  }
}

trait Runner extends ThriftStruct
  with Product5[RunnerDescriptor, Exchange, Short, Short, RunnerState]
  with java.io.Serializable
{
  import Runner._

  def decription: RunnerDescriptor
  def exchange: Exchange
  def handicap: Short
  def selectionId: Short
  def state: RunnerState

  def _1 = decription
  def _2 = exchange
  def _3 = handicap
  def _4 = selectionId
  def _5 = state

  override def write(_oprot: TProtocol) {
    Runner.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val decription_item = decription
      _oprot.writeFieldBegin(DecriptionField)
      decription_item.write(_oprot)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val exchange_item = exchange
      _oprot.writeFieldBegin(ExchangeField)
      exchange_item.write(_oprot)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val handicap_item = handicap
      _oprot.writeFieldBegin(HandicapField)
      _oprot.writeI16(handicap_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val selectionId_item = selectionId
      _oprot.writeFieldBegin(SelectionIdField)
      _oprot.writeI16(selectionId_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val state_item = state
      _oprot.writeFieldBegin(StateField)
      state_item.write(_oprot)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    decription: RunnerDescriptor = this.decription, 
    exchange: Exchange = this.exchange, 
    handicap: Short = this.handicap, 
    selectionId: Short = this.selectionId, 
    state: RunnerState = this.state
  ): Runner = new Immutable(
    decription, 
    exchange, 
    handicap, 
    selectionId, 
    state
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Runner]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => decription
    case 1 => exchange
    case 2 => handicap
    case 3 => selectionId
    case 4 => state
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Runner"
}