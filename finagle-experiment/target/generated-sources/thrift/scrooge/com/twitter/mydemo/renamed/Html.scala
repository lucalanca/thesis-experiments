/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Html extends ThriftStructCodec3[Html] {
  val Struct = new TStruct("Html")
  val ContentField = new TField("content", TType.STRING, 1)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Html) {
  }

  override def encode(_item: Html, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Html = decode(_iprot)

  def apply(
    content: String
  ): Html = new Immutable(
    content
  )

  def unapply(_item: Html): Option[String] = Some(_item.content)

  object Immutable extends ThriftStructCodec3[Html] {
    override def encode(_item: Html, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var content: String = null
      var _got_content = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* content */
              _field.`type` match {
                case TType.STRING => {
                  content = {
                    _iprot.readString()
                  }
                  _got_content = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        content
      )
    }
  }

  /**
   * The default read-only implementation of Html.  You typically should not need to
   * directly reference this class; instead, use the Html.apply method to construct
   * new instances.
   */
  class Immutable(
    val content: String
  ) extends Html

  /**
   * This Proxy trait allows you to extend the Html trait with additional state or
   * behavior and implement the read-only methods from Html using an underlying
   * instance.
   */
  trait Proxy extends Html {
    protected def _underlying_Html: Html
    def content: String = _underlying_Html.content
  }
}

trait Html extends ThriftStruct
  with Product1[String]
  with java.io.Serializable
{
  import Html._

  def content: String

  def _1 = content

  override def write(_oprot: TProtocol) {
    Html.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val content_item = content
      _oprot.writeFieldBegin(ContentField)
      _oprot.writeString(content_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    content: String = this.content
  ): Html = new Immutable(
    content
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Html]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => content
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Html"
}