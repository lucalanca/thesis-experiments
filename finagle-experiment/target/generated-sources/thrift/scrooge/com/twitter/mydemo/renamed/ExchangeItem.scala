/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object ExchangeItem extends ThriftStructCodec3[ExchangeItem] {
  val Struct = new TStruct("ExchangeItem")
  val PriceField = new TField("price", TType.DOUBLE, 1)
  val SizeField = new TField("size", TType.DOUBLE, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ExchangeItem) {
  }

  override def encode(_item: ExchangeItem, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): ExchangeItem = decode(_iprot)

  def apply(
    price: Double,
    size: Double
  ): ExchangeItem = new Immutable(
    price,
    size
  )

  def unapply(_item: ExchangeItem): Option[Product2[Double, Double]] = Some(_item)

  object Immutable extends ThriftStructCodec3[ExchangeItem] {
    override def encode(_item: ExchangeItem, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var price: Double = 0.0
      var _got_price = false
      var size: Double = 0.0
      var _got_size = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* price */
              _field.`type` match {
                case TType.DOUBLE => {
                  price = {
                    _iprot.readDouble()
                  }
                  _got_price = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* size */
              _field.`type` match {
                case TType.DOUBLE => {
                  size = {
                    _iprot.readDouble()
                  }
                  _got_size = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        price,
        size
      )
    }
  }

  /**
   * The default read-only implementation of ExchangeItem.  You typically should not need to
   * directly reference this class; instead, use the ExchangeItem.apply method to construct
   * new instances.
   */
  class Immutable(
    val price: Double,
    val size: Double
  ) extends ExchangeItem

  /**
   * This Proxy trait allows you to extend the ExchangeItem trait with additional state or
   * behavior and implement the read-only methods from ExchangeItem using an underlying
   * instance.
   */
  trait Proxy extends ExchangeItem {
    protected def _underlying_ExchangeItem: ExchangeItem
    def price: Double = _underlying_ExchangeItem.price
    def size: Double = _underlying_ExchangeItem.size
  }
}

trait ExchangeItem extends ThriftStruct
  with Product2[Double, Double]
  with java.io.Serializable
{
  import ExchangeItem._

  def price: Double
  def size: Double

  def _1 = price
  def _2 = size

  override def write(_oprot: TProtocol) {
    ExchangeItem.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val price_item = price
      _oprot.writeFieldBegin(PriceField)
      _oprot.writeDouble(price_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val size_item = size
      _oprot.writeFieldBegin(SizeField)
      _oprot.writeDouble(size_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    price: Double = this.price, 
    size: Double = this.size
  ): ExchangeItem = new Immutable(
    price, 
    size
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ExchangeItem]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => price
    case 1 => size
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ExchangeItem"
}