/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Event extends ThriftStructCodec3[Event] {
  val Struct = new TStruct("Event")
  val CountryCodeField = new TField("countryCode", TType.I32, 1)
  val EventNameField = new TField("eventName", TType.STRING, 2)
  val OpenDateField = new TField("openDate", TType.STRING, 3)
  val TimezoneField = new TField("timezone", TType.STRING, 4)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Event) {
  }

  override def encode(_item: Event, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Event = decode(_iprot)

  def apply(
    countryCode: CountryCode,
    eventName: String,
    openDate: String,
    timezone: String
  ): Event = new Immutable(
    countryCode,
    eventName,
    openDate,
    timezone
  )

  def unapply(_item: Event): Option[Product4[CountryCode, String, String, String]] = Some(_item)

  object Immutable extends ThriftStructCodec3[Event] {
    override def encode(_item: Event, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var countryCode: CountryCode = null
      var _got_countryCode = false
      var eventName: String = null
      var _got_eventName = false
      var openDate: String = null
      var _got_openDate = false
      var timezone: String = null
      var _got_timezone = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* countryCode */
              _field.`type` match {
                case TType.I32 => {
                  countryCode = {
                    com.twitter.mydemo.renamed.CountryCode(_iprot.readI32())
                  }
                  _got_countryCode = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* eventName */
              _field.`type` match {
                case TType.STRING => {
                  eventName = {
                    _iprot.readString()
                  }
                  _got_eventName = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* openDate */
              _field.`type` match {
                case TType.STRING => {
                  openDate = {
                    _iprot.readString()
                  }
                  _got_openDate = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* timezone */
              _field.`type` match {
                case TType.STRING => {
                  timezone = {
                    _iprot.readString()
                  }
                  _got_timezone = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        countryCode,
        eventName,
        openDate,
        timezone
      )
    }
  }

  /**
   * The default read-only implementation of Event.  You typically should not need to
   * directly reference this class; instead, use the Event.apply method to construct
   * new instances.
   */
  class Immutable(
    val countryCode: CountryCode,
    val eventName: String,
    val openDate: String,
    val timezone: String
  ) extends Event

  /**
   * This Proxy trait allows you to extend the Event trait with additional state or
   * behavior and implement the read-only methods from Event using an underlying
   * instance.
   */
  trait Proxy extends Event {
    protected def _underlying_Event: Event
    def countryCode: CountryCode = _underlying_Event.countryCode
    def eventName: String = _underlying_Event.eventName
    def openDate: String = _underlying_Event.openDate
    def timezone: String = _underlying_Event.timezone
  }
}

trait Event extends ThriftStruct
  with Product4[CountryCode, String, String, String]
  with java.io.Serializable
{
  import Event._

  def countryCode: CountryCode
  def eventName: String
  def openDate: String
  def timezone: String

  def _1 = countryCode
  def _2 = eventName
  def _3 = openDate
  def _4 = timezone

  override def write(_oprot: TProtocol) {
    Event.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val countryCode_item = countryCode
      _oprot.writeFieldBegin(CountryCodeField)
      _oprot.writeI32(countryCode_item.value)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val eventName_item = eventName
      _oprot.writeFieldBegin(EventNameField)
      _oprot.writeString(eventName_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val openDate_item = openDate
      _oprot.writeFieldBegin(OpenDateField)
      _oprot.writeString(openDate_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val timezone_item = timezone
      _oprot.writeFieldBegin(TimezoneField)
      _oprot.writeString(timezone_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    countryCode: CountryCode = this.countryCode, 
    eventName: String = this.eventName, 
    openDate: String = this.openDate, 
    timezone: String = this.timezone
  ): Event = new Immutable(
    countryCode, 
    eventName, 
    openDate, 
    timezone
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Event]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => countryCode
    case 1 => eventName
    case 2 => openDate
    case 3 => timezone
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Event"
}