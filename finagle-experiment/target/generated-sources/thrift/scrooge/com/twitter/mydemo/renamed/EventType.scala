/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object EventType extends ThriftStructCodec3[EventType] {
  val Struct = new TStruct("EventType")
  val EventNodesField = new TField("eventNodes", TType.LIST, 1)
  val EventTypeIdField = new TField("eventTypeId", TType.I16, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: EventType) {
  }

  override def encode(_item: EventType, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): EventType = decode(_iprot)

  def apply(
    eventNodes: Seq[EventNode] = Seq[EventNode](),
    eventTypeId: Short
  ): EventType = new Immutable(
    eventNodes,
    eventTypeId
  )

  def unapply(_item: EventType): Option[Product2[Seq[EventNode], Short]] = Some(_item)

  object Immutable extends ThriftStructCodec3[EventType] {
    override def encode(_item: EventType, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var eventNodes: Seq[EventNode] = Seq[EventNode]()
      var _got_eventNodes = false
      var eventTypeId: Short = 0
      var _got_eventTypeId = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* eventNodes */
              _field.`type` match {
                case TType.LIST => {
                  eventNodes = {
                    val _list = _iprot.readListBegin()
                    val _rv = new mutable.ArrayBuffer[EventNode](_list.size)
                    var _i = 0
                    while (_i < _list.size) {
                      _rv += {
                        EventNode.decode(_iprot)
                      }
                      _i += 1
                    }
                    _iprot.readListEnd()
                    _rv
                  }
                  _got_eventNodes = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* eventTypeId */
              _field.`type` match {
                case TType.I16 => {
                  eventTypeId = {
                    _iprot.readI16()
                  }
                  _got_eventTypeId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        eventNodes,
        eventTypeId
      )
    }
  }

  /**
   * The default read-only implementation of EventType.  You typically should not need to
   * directly reference this class; instead, use the EventType.apply method to construct
   * new instances.
   */
  class Immutable(
    val eventNodes: Seq[EventNode] = Seq[EventNode](),
    val eventTypeId: Short
  ) extends EventType

  /**
   * This Proxy trait allows you to extend the EventType trait with additional state or
   * behavior and implement the read-only methods from EventType using an underlying
   * instance.
   */
  trait Proxy extends EventType {
    protected def _underlying_EventType: EventType
    def eventNodes: Seq[EventNode] = _underlying_EventType.eventNodes
    def eventTypeId: Short = _underlying_EventType.eventTypeId
  }
}

trait EventType extends ThriftStruct
  with Product2[Seq[EventNode], Short]
  with java.io.Serializable
{
  import EventType._

  def eventNodes: Seq[EventNode]
  def eventTypeId: Short

  def _1 = eventNodes
  def _2 = eventTypeId

  override def write(_oprot: TProtocol) {
    EventType.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val eventNodes_item = eventNodes
      _oprot.writeFieldBegin(EventNodesField)
      _oprot.writeListBegin(new TList(TType.STRUCT, eventNodes_item.size))
      eventNodes_item.foreach { eventNodes_item_element =>
        eventNodes_item_element.write(_oprot)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    if (true) {
      val eventTypeId_item = eventTypeId
      _oprot.writeFieldBegin(EventTypeIdField)
      _oprot.writeI16(eventTypeId_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    eventNodes: Seq[EventNode] = this.eventNodes, 
    eventTypeId: Short = this.eventTypeId
  ): EventType = new Immutable(
    eventNodes, 
    eventTypeId
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[EventType]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => eventNodes
    case 1 => eventTypeId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "EventType"
}