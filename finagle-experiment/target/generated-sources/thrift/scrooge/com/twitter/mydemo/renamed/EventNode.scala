/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object EventNode extends ThriftStructCodec3[EventNode] {
  val Struct = new TStruct("EventNode")
  val EventField = new TField("event", TType.STRUCT, 1)
  val EventIdField = new TField("eventId", TType.I64, 2)
  val MarketNodesField = new TField("marketNodes", TType.LIST, 3)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: EventNode) {
  }

  override def encode(_item: EventNode, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): EventNode = decode(_iprot)

  def apply(
    event: Event,
    eventId: Long,
    marketNodes: Seq[MarketNode] = Seq[MarketNode]()
  ): EventNode = new Immutable(
    event,
    eventId,
    marketNodes
  )

  def unapply(_item: EventNode): Option[Product3[Event, Long, Seq[MarketNode]]] = Some(_item)

  object Immutable extends ThriftStructCodec3[EventNode] {
    override def encode(_item: EventNode, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var event: Event = null
      var _got_event = false
      var eventId: Long = 0L
      var _got_eventId = false
      var marketNodes: Seq[MarketNode] = Seq[MarketNode]()
      var _got_marketNodes = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* event */
              _field.`type` match {
                case TType.STRUCT => {
                  event = {
                    com.twitter.mydemo.renamed.Event.decode(_iprot)
                  }
                  _got_event = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* eventId */
              _field.`type` match {
                case TType.I64 => {
                  eventId = {
                    _iprot.readI64()
                  }
                  _got_eventId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* marketNodes */
              _field.`type` match {
                case TType.LIST => {
                  marketNodes = {
                    val _list = _iprot.readListBegin()
                    val _rv = new mutable.ArrayBuffer[MarketNode](_list.size)
                    var _i = 0
                    while (_i < _list.size) {
                      _rv += {
                        MarketNode.decode(_iprot)
                      }
                      _i += 1
                    }
                    _iprot.readListEnd()
                    _rv
                  }
                  _got_marketNodes = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        event,
        eventId,
        marketNodes
      )
    }
  }

  /**
   * The default read-only implementation of EventNode.  You typically should not need to
   * directly reference this class; instead, use the EventNode.apply method to construct
   * new instances.
   */
  class Immutable(
    val event: Event,
    val eventId: Long,
    val marketNodes: Seq[MarketNode] = Seq[MarketNode]()
  ) extends EventNode

  /**
   * This Proxy trait allows you to extend the EventNode trait with additional state or
   * behavior and implement the read-only methods from EventNode using an underlying
   * instance.
   */
  trait Proxy extends EventNode {
    protected def _underlying_EventNode: EventNode
    def event: Event = _underlying_EventNode.event
    def eventId: Long = _underlying_EventNode.eventId
    def marketNodes: Seq[MarketNode] = _underlying_EventNode.marketNodes
  }
}

trait EventNode extends ThriftStruct
  with Product3[Event, Long, Seq[MarketNode]]
  with java.io.Serializable
{
  import EventNode._

  def event: Event
  def eventId: Long
  def marketNodes: Seq[MarketNode]

  def _1 = event
  def _2 = eventId
  def _3 = marketNodes

  override def write(_oprot: TProtocol) {
    EventNode.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val event_item = event
      _oprot.writeFieldBegin(EventField)
      event_item.write(_oprot)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val eventId_item = eventId
      _oprot.writeFieldBegin(EventIdField)
      _oprot.writeI64(eventId_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val marketNodes_item = marketNodes
      _oprot.writeFieldBegin(MarketNodesField)
      _oprot.writeListBegin(new TList(TType.STRUCT, marketNodes_item.size))
      marketNodes_item.foreach { marketNodes_item_element =>
        marketNodes_item_element.write(_oprot)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    event: Event = this.event, 
    eventId: Long = this.eventId, 
    marketNodes: Seq[MarketNode] = this.marketNodes
  ): EventNode = new Immutable(
    event, 
    eventId, 
    marketNodes
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[EventNode]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => event
    case 1 => eventId
    case 2 => marketNodes
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "EventNode"
}