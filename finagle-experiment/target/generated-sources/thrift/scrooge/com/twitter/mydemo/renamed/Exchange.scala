/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Exchange extends ThriftStructCodec3[Exchange] {
  val Struct = new TStruct("Exchange")
  val AvailableToBackField = new TField("availableToBack", TType.LIST, 1)
  val AvailableToLayField = new TField("availableToLay", TType.LIST, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Exchange) {
  }

  override def encode(_item: Exchange, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Exchange = decode(_iprot)

  def apply(
    availableToBack: Seq[ExchangeItem] = Seq[ExchangeItem](),
    availableToLay: Seq[ExchangeItem] = Seq[ExchangeItem]()
  ): Exchange = new Immutable(
    availableToBack,
    availableToLay
  )

  def unapply(_item: Exchange): Option[Product2[Seq[ExchangeItem], Seq[ExchangeItem]]] = Some(_item)

  object Immutable extends ThriftStructCodec3[Exchange] {
    override def encode(_item: Exchange, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var availableToBack: Seq[ExchangeItem] = Seq[ExchangeItem]()
      var _got_availableToBack = false
      var availableToLay: Seq[ExchangeItem] = Seq[ExchangeItem]()
      var _got_availableToLay = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* availableToBack */
              _field.`type` match {
                case TType.LIST => {
                  availableToBack = {
                    val _list = _iprot.readListBegin()
                    val _rv = new mutable.ArrayBuffer[ExchangeItem](_list.size)
                    var _i = 0
                    while (_i < _list.size) {
                      _rv += {
                        ExchangeItem.decode(_iprot)
                      }
                      _i += 1
                    }
                    _iprot.readListEnd()
                    _rv
                  }
                  _got_availableToBack = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* availableToLay */
              _field.`type` match {
                case TType.LIST => {
                  availableToLay = {
                    val _list = _iprot.readListBegin()
                    val _rv = new mutable.ArrayBuffer[ExchangeItem](_list.size)
                    var _i = 0
                    while (_i < _list.size) {
                      _rv += {
                        ExchangeItem.decode(_iprot)
                      }
                      _i += 1
                    }
                    _iprot.readListEnd()
                    _rv
                  }
                  _got_availableToLay = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        availableToBack,
        availableToLay
      )
    }
  }

  /**
   * The default read-only implementation of Exchange.  You typically should not need to
   * directly reference this class; instead, use the Exchange.apply method to construct
   * new instances.
   */
  class Immutable(
    val availableToBack: Seq[ExchangeItem] = Seq[ExchangeItem](),
    val availableToLay: Seq[ExchangeItem] = Seq[ExchangeItem]()
  ) extends Exchange

  /**
   * This Proxy trait allows you to extend the Exchange trait with additional state or
   * behavior and implement the read-only methods from Exchange using an underlying
   * instance.
   */
  trait Proxy extends Exchange {
    protected def _underlying_Exchange: Exchange
    def availableToBack: Seq[ExchangeItem] = _underlying_Exchange.availableToBack
    def availableToLay: Seq[ExchangeItem] = _underlying_Exchange.availableToLay
  }
}

trait Exchange extends ThriftStruct
  with Product2[Seq[ExchangeItem], Seq[ExchangeItem]]
  with java.io.Serializable
{
  import Exchange._

  def availableToBack: Seq[ExchangeItem]
  def availableToLay: Seq[ExchangeItem]

  def _1 = availableToBack
  def _2 = availableToLay

  override def write(_oprot: TProtocol) {
    Exchange.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val availableToBack_item = availableToBack
      _oprot.writeFieldBegin(AvailableToBackField)
      _oprot.writeListBegin(new TList(TType.STRUCT, availableToBack_item.size))
      availableToBack_item.foreach { availableToBack_item_element =>
        availableToBack_item_element.write(_oprot)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    if (true) {
      val availableToLay_item = availableToLay
      _oprot.writeFieldBegin(AvailableToLayField)
      _oprot.writeListBegin(new TList(TType.STRUCT, availableToLay_item.size))
      availableToLay_item.foreach { availableToLay_item_element =>
        availableToLay_item_element.write(_oprot)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    availableToBack: Seq[ExchangeItem] = this.availableToBack, 
    availableToLay: Seq[ExchangeItem] = this.availableToLay
  ): Exchange = new Immutable(
    availableToBack, 
    availableToLay
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Exchange]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => availableToBack
    case 1 => availableToLay
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Exchange"
}