/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object RunnerState extends ThriftStructCodec3[RunnerState] {
  val Struct = new TStruct("RunnerState")
  val SortPriorityField = new TField("sortPriority", TType.I16, 1)
  val StatusField = new TField("status", TType.I32, 2)
  val TotalMatchedField = new TField("totalMatched", TType.I16, 3)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: RunnerState) {
  }

  override def encode(_item: RunnerState, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): RunnerState = decode(_iprot)

  def apply(
    sortPriority: Short,
    status: RunnerStateStatus,
    totalMatched: Short
  ): RunnerState = new Immutable(
    sortPriority,
    status,
    totalMatched
  )

  def unapply(_item: RunnerState): Option[Product3[Short, RunnerStateStatus, Short]] = Some(_item)

  object Immutable extends ThriftStructCodec3[RunnerState] {
    override def encode(_item: RunnerState, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var sortPriority: Short = 0
      var _got_sortPriority = false
      var status: RunnerStateStatus = null
      var _got_status = false
      var totalMatched: Short = 0
      var _got_totalMatched = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* sortPriority */
              _field.`type` match {
                case TType.I16 => {
                  sortPriority = {
                    _iprot.readI16()
                  }
                  _got_sortPriority = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* status */
              _field.`type` match {
                case TType.I32 => {
                  status = {
                    com.twitter.mydemo.renamed.RunnerStateStatus(_iprot.readI32())
                  }
                  _got_status = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* totalMatched */
              _field.`type` match {
                case TType.I16 => {
                  totalMatched = {
                    _iprot.readI16()
                  }
                  _got_totalMatched = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        sortPriority,
        status,
        totalMatched
      )
    }
  }

  /**
   * The default read-only implementation of RunnerState.  You typically should not need to
   * directly reference this class; instead, use the RunnerState.apply method to construct
   * new instances.
   */
  class Immutable(
    val sortPriority: Short,
    val status: RunnerStateStatus,
    val totalMatched: Short
  ) extends RunnerState

  /**
   * This Proxy trait allows you to extend the RunnerState trait with additional state or
   * behavior and implement the read-only methods from RunnerState using an underlying
   * instance.
   */
  trait Proxy extends RunnerState {
    protected def _underlying_RunnerState: RunnerState
    def sortPriority: Short = _underlying_RunnerState.sortPriority
    def status: RunnerStateStatus = _underlying_RunnerState.status
    def totalMatched: Short = _underlying_RunnerState.totalMatched
  }
}

trait RunnerState extends ThriftStruct
  with Product3[Short, RunnerStateStatus, Short]
  with java.io.Serializable
{
  import RunnerState._

  def sortPriority: Short
  def status: RunnerStateStatus
  def totalMatched: Short

  def _1 = sortPriority
  def _2 = status
  def _3 = totalMatched

  override def write(_oprot: TProtocol) {
    RunnerState.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val sortPriority_item = sortPriority
      _oprot.writeFieldBegin(SortPriorityField)
      _oprot.writeI16(sortPriority_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val status_item = status
      _oprot.writeFieldBegin(StatusField)
      _oprot.writeI32(status_item.value)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val totalMatched_item = totalMatched
      _oprot.writeFieldBegin(TotalMatchedField)
      _oprot.writeI16(totalMatched_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    sortPriority: Short = this.sortPriority, 
    status: RunnerStateStatus = this.status, 
    totalMatched: Short = this.totalMatched
  ): RunnerState = new Immutable(
    sortPriority, 
    status, 
    totalMatched
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[RunnerState]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => sortPriority
    case 1 => status
    case 2 => totalMatched
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "RunnerState"
}