/**
 * generated by Scrooge 3.1.1
 */
package com.twitter.mydemo.renamed

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object RunnerDescriptor extends ThriftStructCodec3[RunnerDescriptor] {
  val Struct = new TStruct("RunnerDescriptor")
  val RunnerNameField = new TField("runnerName", TType.STRING, 1)
  val MetadataField = new TField("metadata", TType.STRUCT, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: RunnerDescriptor) {
  }

  override def encode(_item: RunnerDescriptor, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): RunnerDescriptor = decode(_iprot)

  def apply(
    runnerName: String,
    metadata: RunnerMetadata
  ): RunnerDescriptor = new Immutable(
    runnerName,
    metadata
  )

  def unapply(_item: RunnerDescriptor): Option[Product2[String, RunnerMetadata]] = Some(_item)

  object Immutable extends ThriftStructCodec3[RunnerDescriptor] {
    override def encode(_item: RunnerDescriptor, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var runnerName: String = null
      var _got_runnerName = false
      var metadata: RunnerMetadata = null
      var _got_metadata = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* runnerName */
              _field.`type` match {
                case TType.STRING => {
                  runnerName = {
                    _iprot.readString()
                  }
                  _got_runnerName = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* metadata */
              _field.`type` match {
                case TType.STRUCT => {
                  metadata = {
                    com.twitter.mydemo.renamed.RunnerMetadata.decode(_iprot)
                  }
                  _got_metadata = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        runnerName,
        metadata
      )
    }
  }

  /**
   * The default read-only implementation of RunnerDescriptor.  You typically should not need to
   * directly reference this class; instead, use the RunnerDescriptor.apply method to construct
   * new instances.
   */
  class Immutable(
    val runnerName: String,
    val metadata: RunnerMetadata
  ) extends RunnerDescriptor

  /**
   * This Proxy trait allows you to extend the RunnerDescriptor trait with additional state or
   * behavior and implement the read-only methods from RunnerDescriptor using an underlying
   * instance.
   */
  trait Proxy extends RunnerDescriptor {
    protected def _underlying_RunnerDescriptor: RunnerDescriptor
    def runnerName: String = _underlying_RunnerDescriptor.runnerName
    def metadata: RunnerMetadata = _underlying_RunnerDescriptor.metadata
  }
}

trait RunnerDescriptor extends ThriftStruct
  with Product2[String, RunnerMetadata]
  with java.io.Serializable
{
  import RunnerDescriptor._

  def runnerName: String
  def metadata: RunnerMetadata

  def _1 = runnerName
  def _2 = metadata

  override def write(_oprot: TProtocol) {
    RunnerDescriptor.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val runnerName_item = runnerName
      _oprot.writeFieldBegin(RunnerNameField)
      _oprot.writeString(runnerName_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val metadata_item = metadata
      _oprot.writeFieldBegin(MetadataField)
      metadata_item.write(_oprot)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    runnerName: String = this.runnerName, 
    metadata: RunnerMetadata = this.metadata
  ): RunnerDescriptor = new Immutable(
    runnerName, 
    metadata
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[RunnerDescriptor]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => runnerName
    case 1 => metadata
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "RunnerDescriptor"
}